---
- name: Copy dnstt-server
  copy:
    src: dnstt-server
    dest: /usr/local/bin/dnstt-server
    mode: 0755

- name: Check if shared key exists
  stat:
    path: "/tmp/{{ shared_privkey }}"
  register: shared_keys
  delegate_to: localhost
  run_once: true
  become: false
  when: lb_enabled

- name: Generate shared keys if not exists
  command: >
    dnstt-server -gen-key -privkey-file {{ keys_path }}/{{ shared_privkey }} -pubkey-file {{ keys_path }}/{{ shared_pubkey }}
  when: lb_enabled and not shared_keys.stat.exists

- name: Fetch shared keys to localhost
  fetch:
    src: "{{ item }}"
    dest: "/tmp/{{ item | basename }}"
    flat: true
  loop:
    - "{{ keys_path }}/{{ shared_privkey }}"
    - "{{ keys_path }}/{{ shared_pubkey }}"
  delegate_to: localhost
  when: lb_enabled and not shared_keys.stat.exists

- name: Copy shared privkey to server node
  copy:
    src: "/tmp/{{ shared_privkey }}"
    dest: "{{ keys_path }}/{{ shared_privkey }}"
    mode: 0600
  when: lb_enabled and shared_keys.stat.exists

- name: Generate per tunnel key pairs if not exists
  command: >
    dnstt-server -gen-key -privkey-file {{ keys_path }}/{{ tun.name }}.key -pubkey-file {{ keys_path }}/{{ tun.name }}.pub
  args:
    creates: "{{ keys_path }}/{{ tun.name }}.key"
  loop: "{{ tuns }}"
  loop_control:
    loop_var: tun
  when: not lb_enabled

- name: Fetch per tunnel public keys from server node
  fetch:
    src: "{{ keys_path }}/{{ tun.name }}.pub"
    dest: "/tmp/{{ tun.name }}.pub"
    flat: true
  loop: "{{ tuns }}"
  loop_control:
    loop_var: tun
  when: not lb_enabled

- name: Make systemd unit file for each tunnel
  template:
    src: smuggler@.service.j2
    dest: "/etc/systemd/system/smuggler@{{ tun.name }}.service"
    mode: 0644
    owner: root
    group: root
  loop: "{{ tuns }}"
  loop_control:
    loop_var: tun
  changed_when: true

- name: Reload systemd
  systemd:
    daemon_reload: true
  changed_when: true

- name: Enable and start tunnel services
  systemd:
    name: "smuggler@{{ tun.name }}"
    enabled: true
    state: restarted
  loop: "{{ tuns }}"
  loop_control:
    loop_var: tun
  changed_when: true
